// Generated by CoffeeScript 1.10.0
(function() {
  var Cache, Promise, Wx, WxError, WxHttpError, _, fs, moment, rp, utils, xml_creator, xml_parser,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  utils = require('utility');

  rp = require('request-promise');

  _ = require('lodash');

  Promise = require('bluebird');

  moment = require('moment');

  xml_creator = require('xml');

  xml_parser = require('xml2js');

  fs = require('fs');

  Promise.promisifyAll(xml_parser);

  WxHttpError = (function(superClass) {
    extend(WxHttpError, superClass);

    function WxHttpError(msg) {
      this.name = 'HttpError';
      this.msg = msg;
    }

    WxHttpError.prototype.toString = function() {
      return this.name + ": " + this.msg;
    };

    return WxHttpError;

  })(Error);

  WxError = (function(superClass) {
    extend(WxError, superClass);

    function WxError(msg) {
      this.name = 'WxError';
      this.msg = msg;
    }

    return WxError;

  })(WxHttpError);

  Cache = (function() {
    function Cache() {}

    Cache.prototype.get = function(key) {
      return Promise.resolve(null);
    };

    Cache.prototype.set = function(key, value, expire) {
      return Promise.resolve(value);
    };

    return Cache;

  })();

  Wx = (function() {
    function Wx(id, secret, encrypt_key, cache, mch_id, cert_path) {
      this.id = id;
      this.secret = secret;
      this.encrypt_key = encrypt_key != null ? encrypt_key : null;
      this.cache = cache != null ? cache : new Cache();
      this.mch_id = mch_id != null ? mch_id : null;
      this.cert_path = cert_path != null ? cert_path : null;
    }

    Wx.prototype.get_sign = function(obj, key) {
      var s;
      if (key == null) {
        key = null;
      }
      obj = _.clone(obj);
      if (_.has(obj, 'sign')) {
        delete obj.sign;
      }
      s = _.keys(obj).sort().map(function(k) {
        if (typeof obj[k] === 'object') {
          return k + "=" + obj[k]._cdata;
        } else if (!obj[k]) {
          return false;
        } else {
          return k + "=" + obj[k];
        }
      }).filter(function(result) {
        return result;
      }).join('&');
      if (key === null) {
        key = this.encrypt_key;
      }
      s = s + "&key=" + key;
      return utils.md5(s).toUpperCase();
    };

    Wx.prototype.nonce_str = function() {
      return utils.randomString(32, '1234567890abcdefghijklmnopqrstuvwxyz').toUpperCase();
    };

    Wx.prototype.auth_url = function(redirect_uri, state, scope) {
      var url;
      if (scope == null) {
        scope = 'snsapi_base';
      }
      url = 'https://open.weixin.qq.com/connect/oauth2/authorize';
      url = url + "?appid=" + this.id;
      url = url + "&redirect_uri=" + (utils.encodeURIComponent(redirect_uri));
      return url + "&response_type=code&scope=" + scope + "&state=" + state + "#wechat_redirect";
    };

    Wx.prototype.login = function(code) {
      var url;
      url = "https://api.weixin.qq.com/sns/oauth2/access_token?appid=" + this.id + "&secret=" + this.secret + "&code=" + code + "&grant_type=authorization_code";
      return rp({
        uri: url,
        json: true
      }).then(function(request) {
        if (_.has(request, 'errcode')) {
          return Promise.reject(new WxError(request.errmsg));
        } else {
          return Promise.resolve(request);
        }
      });
    };

    Wx.prototype.user_info = function(token, openid) {
      var url;
      url = "https://api.weixin.qq.com/sns/userinfo?access_token=" + token + "&openid=" + openid + "&lang=zh_CN";
      return rp({
        uri: url,
        json: true
      }).then(function(request) {
        if (_.has(request, 'errcode')) {
          return Promise.reject(new WxError(request.errmsg));
        } else {
          return Promise.resolve(request);
        }
      });
    };

    Wx.prototype.access_token = function() {
      return this.cache.get('access_token').then((function(_this) {
        return function(token) {
          var uri;
          if (token != null) {
            return Promise.resolve(token);
          }
          uri = "https://api.weixin.qq.com/cgi-bin/token";
          return rp({
            uri: uri,
            qs: {
              grant_type: 'client_credential',
              appid: _this.id,
              secret: _this.secret
            },
            json: true
          }).then(function(req) {
            if (_.has(req, 'errcode')) {
              return Promise.reject(new WxError(req.errmsg));
            } else {
              return _this.cache.set('access_token', req.access_token, req.expires_in - 60);
            }
          });
        };
      })(this));
    };

    Wx.prototype.create_menu = function(json) {
      var uri;
      uri = 'https://api.weixin.qq.com/cgi-bin/menu/create';
      return this.access_token().then(function(token) {
        return rp({
          uri: uri,
          method: 'POST',
          qs: {
            access_token: token
          },
          body: json,
          json: true
        });
      }).then(function(req) {
        if (req.errmsg !== 'ok') {
          return Promise.reject(new WxError(req.errmsg));
        } else {
          return Promise.resolve();
        }
      });
    };

    Wx.prototype.jsapi_ticket = function() {
      return this.cache.get('jsapi_ticket').then((function(_this) {
        return function(ticket) {
          var uri;
          if (ticket != null) {
            return Promise.resolve(ticket);
          }
          uri = "https://api.weixin.qq.com/cgi-bin/ticket/getticket";
          return _this.access_token().then(function(token) {
            return rp({
              uri: uri,
              qs: {
                access_token: token,
                type: 'jsapi'
              },
              json: true
            });
          }).then(function(req) {
            if (req.errmsg !== 'ok') {
              return Promise.reject(new WxError(req.errmsg));
            } else {
              return _this.cache.set('jsapi_ticket', req.ticket, 7140);
            }
          });
        };
      })(this));
    };

    Wx.prototype.js_signature = function(url) {
      return this.jsapi_ticket().then(function(ticket) {
        var letter, letter_small, noncestr, s, signature, timestamp;
        letter = _.map(_.range(65, 91), function(v) {
          return String.fromCharCode(v);
        });
        letter_small = _.map(letter, function(v) {
          return v.toLowerCase();
        });
        s = [letter.join(''), letter_small.join(''), _.range(0, 10).join('')];
        noncestr = utils.randomString(16, s.join(''));
        timestamp = _.now();
        s = "jsapi_ticket=" + ticket + "&noncestr=" + noncestr + "&timestamp=" + timestamp + "&url=" + url;
        signature = utils.sha1(s);
        return {
          noncestr: noncestr,
          timestamp: timestamp,
          signature: signature
        };
      });
    };

    Wx.prototype.temp_info = function(openid, tid, data, url) {
      var uri;
      if (url == null) {
        url = null;
      }
      uri = 'https://api.weixin.qq.com/cgi-bin/message/template/send';
      return this.access_token().then(function(token) {
        return rp({
          uri: uri,
          method: 'POST',
          qs: {
            access_token: token
          },
          body: {
            touser: openid,
            template_id: tid,
            url: url,
            data: data
          },
          json: true
        }).then(function(req) {
          if (req.errmsg !== 'ok') {
            return Promise.reject(new WxError(req.errmsg));
          } else {
            return Promise.resolve(true);
          }
        });
      });
    };

    Wx.prototype.download = function(media_id) {
      var uri;
      uri = 'http://file.api.weixin.qq.com/cgi-bin/media/get';
      return this.access_token().then(function(token) {
        return rp({
          uri: uri,
          qs: {
            access_token: token,
            media_id: media_id
          },
          encoding: null,
          resolveWithFullResponse: true
        }).then(function(response) {
          var req;
          if (response.statusCode !== 200) {
            return Promise.reject(new WxHttpError(response.statusCode));
          } else if (response.headers['content-type'] === 'text/plain') {
            req = JSON.parse(response.body.toString());
            return Promise.reject(new WxError(req.errmsg));
          } else {
            return Promise.resolve(response);
          }
        });
      });
    };

    Wx.prototype.xml_parser = function(s) {
      return xml_parser.parseStringAsync(s).then(function(result) {
        var xml;
        xml = result.xml;
        _.forIn(xml, function(v, k) {
          return xml[k.toLowerCase()] = v[0];
        });
        return Promise.resolve(xml);
      });
    };

    Wx.prototype.o2l = function(o) {
      var data;
      data = [];
      _.forIn(o, function(v, k) {
        var _obj;
        _obj = {};
        _obj[k] = v;
        return data.push(_obj);
      });
      return data;
    };

    Wx.prototype.xml_creator = function(obj) {
      var data;
      data = this.o2l(obj);
      return xml_creator({
        xml: data
      });
    };

    Wx.prototype.unified_order = function(name, number, price, buyer_openid, notify_url, ip) {
      var uri, xml;
      uri = 'https://api.mch.weixin.qq.com/pay/unifiedorder';
      xml = {
        appid: this.id,
        mch_id: this.mch_id,
        nonce_str: this.nonce_str(),
        body: name,
        out_trade_no: number,
        total_fee: price * 100,
        spbill_create_ip: ip,
        notify_url: notify_url,
        trade_type: 'JSAPI',
        openid: buyer_openid
      };
      xml.sign = this.get_sign(xml);
      xml = this.xml_creator(xml);
      return rp({
        uri: uri,
        method: 'POST',
        body: xml,
        encoding: null,
        resolveWithFullResponse: true
      }).then((function(_this) {
        return function(response) {
          if (response.statusCode !== 200) {
            return Promise.reject(new WxHttpError(response.statusCode));
          } else {
            return _this.xml_parser(response.body.toString()).then(function(xml) {
              if (xml.return_code === 'SUCCESS' && _this.get_sign(xml) === xml.sign) {
                if (xml.result_code === 'SUCCESS') {
                  return Promise.resolve(xml);
                } else {
                  return Promise.reject(new WxError(xml.err_code_des));
                }
              } else {
                return Promise.reject(new WxError(xml.return_msg));
              }
            });
          }
        };
      })(this));
    };

    Wx.prototype.close_order = function(number) {
      var uri, xml;
      uri = 'https://api.mch.weixin.qq.com/pay/closeorder';
      xml = {
        appid: this.id,
        mch_id: this.mch_id,
        nonce_str: this.nonce_str(),
        out_trade_no: number
      };
      xml.sign = this.get_sign(xml);
      xml = this.xml_creator(xml);
      return rp({
        uri: uri,
        method: 'POST',
        body: xml,
        encoding: null,
        resolveWithFullResponse: true
      }).then((function(_this) {
        return function(response) {
          if (response.statusCode !== 200) {
            return Promise.reject(new WxHttpError(response.statusCode));
          } else {
            return _this.xml_parser(response.body.toString()).then(function(xml) {
              if (xml.return_code === 'SUCCESS' && _this.get_sign(xml) === xml.sign) {
                if (xml.result_code === 'SUCCESS') {
                  return Promise.resolve(xml);
                } else {
                  return Promise.reject(new WxError(xml.err_code_des));
                }
              } else {
                return Promise.reject(new WxError(xml.return_msg));
              }
            });
          }
        };
      })(this));
    };

    Wx.prototype.refund = function(number, price, refund_price) {
      var uri, xml;
      uri = 'https://api.mch.weixin.qq.com/secapi/pay/refund';
      xml = {
        appid: this.id,
        mch_id: this.mch_id,
        nonce_str: this.nonce_str(),
        out_trade_no: number,
        out_refund_no: number,
        total_fee: _.multiply(price, 100),
        refund_fee: _.multiply(refund_price, 100),
        op_user_id: this.mch_id
      };
      xml.sign = this.get_sign(xml);
      xml = this.xml_creator(xml);
      return rp({
        uri: uri,
        method: 'POST',
        body: xml,
        encoding: null,
        resolveWithFullResponse: true,
        agentOptions: {
          pfx: fs.readFileSync(this.cert_path),
          passphrase: this.mch_id
        }
      }).then((function(_this) {
        return function(response) {
          if (response.statusCode !== 200) {
            return Promise.reject(new WxHttpError(response.statusCode));
          } else {
            return _this.xml_parser(response.body.toString()).then(function(xml) {
              if (xml.return_code === 'SUCCESS' && _this.get_sign(xml) === xml.sign) {
                if (xml.result_code === 'SUCCESS') {
                  return Promise.resolve(xml);
                } else {
                  return Promise.reject(new WxError(xml.err_code_des));
                }
              } else {
                return Promise.reject(new WxError(xml.return_msg));
              }
            });
          }
        };
      })(this));
    };

    Wx.prototype.check_pay = function(out_trade_no) {
      var uri, xml;
      uri = 'https://api.mch.weixin.qq.com/pay/orderquery';
      xml = {
        appid: this.id,
        mch_id: this.mch_id,
        out_trade_no: out_trade_no,
        nonce_str: this.nonce_str()
      };
      xml.sign = this.get_sign(xml);
      xml = this.xml_creator(xml);
      return rp({
        uri: uri,
        method: 'POST',
        body: xml,
        encoding: null,
        resolveWithFullResponse: true
      }).then((function(_this) {
        return function(response) {
          if (response.statusCode !== 200) {
            return Promise.reject(new WxHttpError(response.statusCode));
          } else {
            return _this.xml_parser(response.body.toString()).then(function(xml) {
              if (xml.return_code === 'SUCCESS' && _this.get_sign(xml) === xml.sign) {
                if (xml.result_code === 'SUCCESS') {
                  return Promise.resolve(xml);
                } else {
                  return Promise.reject(new WxError(xml.err_code_des));
                }
              } else {
                return Promise.reject(new WxError(xml.return_msg));
              }
            });
          }
        };
      })(this));
    };

    Wx.prototype.hb = function(number, openid, price, send_name, wishing, act_name, remark, ip) {
      var uri, xml;
      uri = 'https://api.mch.weixin.qq.com/mmpaymkttransfers/sendredpack';
      xml = {
        wxappid: {
          _cdata: this.id
        },
        mch_id: {
          _cdata: this.mch_id
        },
        nonce_str: {
          _cdata: this.nonce_str()
        },
        mch_billno: {
          _cdata: number
        },
        send_name: {
          _cdata: send_name
        },
        re_openid: {
          _cdata: openid
        },
        total_amount: {
          _cdata: price * 100
        },
        total_num: {
          _cdata: 1
        },
        wishing: {
          _cdata: wishing
        },
        client_ip: {
          _cdata: ip
        },
        act_name: {
          _cdata: act_name
        },
        remark: {
          _cdata: remark
        }
      };
      xml.sign = {
        _cdata: this.get_sign(xml)
      };
      xml = this.xml_creator(xml);
      return rp({
        uri: uri,
        method: 'POST',
        body: xml,
        encoding: null,
        resolveWithFullResponse: true,
        agentOptions: {
          pfx: fs.readFileSync(this.cert_path),
          passphrase: this.mch_id
        }
      }).then((function(_this) {
        return function(response) {
          if (response.statusCode !== 200) {
            return Promise.reject(new HttpError(response.statusCode));
          } else {
            return _this.xml_parser(response.body.toString()).then(function(xml) {
              console.log(xml);
              if (xml.return_code === 'SUCCESS') {
                if (xml.result_code === 'SUCCESS') {
                  return Promise.resolve(xml);
                } else if (xml.err_code_des === 'SYSTEMERROR') {
                  return Promise.resolve(xml);
                } else {
                  return Promise.reject(new WechatError(xml.err_code_des));
                }
              } else {
                return Promise.reject(new WechatError(xml.return_msg));
              }
            });
          }
        };
      })(this));
    };

    Wx.prototype.kflist = function() {
      var uri;
      uri = 'https://api.weixin.qq.com/cgi-bin/customservice/getkflist';
      return this.access_token().then(function(token) {
        return rp({
          uri: uri,
          qs: {
            access_token: token
          },
          json: true
        });
      });
    };

    Wx.prototype.online_kflist = function() {
      var uri;
      uri = 'https://api.weixin.qq.com/cgi-bin/customservice/getonlinekflist';
      return this.access_token().then(function(token) {
        return rp({
          uri: uri,
          qs: {
            access_token: token
          },
          json: true
        });
      });
    };

    Wx.prototype.create_talk = function(kf_account, openid) {
      var uri;
      uri = 'https://api.weixin.qq.com/customservice/kfsession/create';
      return this.access_token().then(function(token) {
        return rp({
          uri: uri,
          method: 'POST',
          qs: {
            access_token: token
          },
          body: {
            kf_account: kf_account,
            openid: openid
          },
          json: true
        });
      }).then(function(req) {
        console.log(req);
        if (req.errmsg === 'ok') {
          return Promise.resolve();
        } else {
          return Promise.reject(req.errmsg);
        }
      });
    };

    return Wx;

  })();

  module.exports.Wx = Wx;

  module.exports.WxHttpError = WxHttpError;

  module.exports.WxError = WxError;

}).call(this);

//# sourceMappingURL=index.js.map
